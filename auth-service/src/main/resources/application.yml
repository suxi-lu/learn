server:
  port: 18001
  servlet:
    context-path: /
  ssl:
    enabled: false

eureka:
  instance:
    home-page-url-path: ${server.servlet.context-path}
    metadata-map:
      management:
        context-path: ${server.servlet.context-path}/actuator
      user:
        name: user
        password: password

#logging:
#  config: classpath:logback-logstash.xml

logging:
  level:
    root: INFO
    org.springframework.web.servlet.DispatcherServlet: DEBUG
    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: TRACE

spring:
  security:
    oauth2:
      client:
        registration:
          cas-oauth:
            provider: cas-oauth
            client-id: clientid
            client-secret: clientSecret
            authorization-grant-type: client_credentials
        provider:
          cas-oauth:
            authorization-uri: http://cas.example.org:8080/cas/oauth2.0/authorize
            token-uri: http://cas.example.org:8080/cas/oauth2.0/token
            user-info-uri: http://cas.example.org:8080/cas/oauth2.0/profile
#            user-name-attribute: sub
#            jwk-set-uri: http://cas.example.org:8080/cas/oauth2.0/keys
#      resourceserver:
#        jwt:
#          #issuer-uri: http://cas.example.org:8080/cas/oauth2.0/profile
#          jwk-set-uri: http://cas.example.org:8080/cas/oauth2.0/profile
  #      client:
#        registration:
#          cas-oauth:
#            client-id: clientid
#            client-secret: clientSecret
#            #authorization-grant-type: authorization_code
#            #redirect-uri: "{baseUrl}/authorized/okta"
#            #redirect-uri: http://cas.example.org:8080/cas/oauth2.0/profile
#            #scope: read, write
#        provider:
#          cas-oauth:
#            authorization-uri: http://cas.example.org:8080/cas/oauth2.0/authorize
#            token-uri: http://cas.example.org:8080/cas/oauth2.0/accessToken
#            user-info-uri: http://cas.example.org:8080/cas/oauth2.0/profile

  messages:
    basename: messages,i18n
  datasource:
    url: jdbc:p6spy:mysql://101.132.110.185:3306/public?verifyServerCertificate=false&useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true
    username: learn
    password: learn-m
#    driver-class-name: com.mysql.cj.jdbc.Driver
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver

  druid:
    initial-size: 5
    max-active: 10
    min-idle: 5
    max-wait: 60000
    pool-prepared-statements: true
    max-pool-prepared-statement-per-connection-size: 20
    validation-query: SELECT 1 FROM DUAL
    validation-query-timeout: 60000
    test-on-borrow: false
    test-on-return: false
    test-while-idle: true
    time-between-eviction-runs-millis: 60000
    min-evictable-idle-time-millis: 100000
    #max-evictable-idle-time-millis: 100000
    filters: stat,wall,log4j
    web-stat-filter:
      enabled: true
      url-pattern: /*
      #exclusions: *.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
      session-stat-enable: true
      session-stat-max-count: 1000
      principal-session-name:
      principal-cookie-name:
      profile-enable: true
    stat-view-servlet:
      enabled: true
      url-pattern: /druid/*
      reset-enable: true
      login-username: druid
      login-password: druid
      allow: 127.0.0.1
      deny:
    filter:
      stat:
        db-type: mysql
        log-slow-sql: true
        slow-sql-millis: 2000
      wall:
        enabled: true
        db-type: mysql
        config.delete-allow: false
        config.drop-table-allow: false

  redis:
    host: 101.132.110.185
    password: learn-r
    port: 16379

  rabbitmq:
    host: 101.132.110.185
    port: 5672
    username: learn
    password: learn-r
    vhost: /

  zipkin:
    sender:
      type: web
    base-url: http://127.0.0.1:9411/

  sleuth:
    sampler:
      probability: 1.0
